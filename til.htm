---
layout: default
title: Anuradha Kumari
pageTitle: Quick tips and tricks
permalink: /quicktips/
is_home_btn_reqd: "True"
is_project_btn_reqd: "False"
---

<section class="til">
  <h2>Sharing my everyday learnings</h2>

<p>This page will contain all the learnings and related resources which might be helpful for me in future as a quick reference. 
  Sharing in public, in case anyone else finds it useful.</p>
  <ul class="til-list">
    
<!--     <li  class="accordion" id="ac-3">  
      <h3>
        <button onclick=toggle('ac-3')><i class="fa fa-plus-square-o" aria-hidden="true"></i>HTML &lt;abbr&gt; tag</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="08/17/2020">17 August 2020</time>       
          <p>
            
          </p>
           <div>
              <strong>Read more:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr" target="_blank">MDN documentation on abbr tag</a>
          </div>
        </div>
    </li> -->
    
      
    <li  class="accordion" id="ac-9">  
      <h3>
        <button onclick=toggle('ac-9')><i class="fa fa-plus-square-o" aria-hidden="true"></i>
          Blue-Green deployment
        </button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="09/23/2020">23 September 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
            <p>
            Today I came across term <a href="https://martinfowler.com/bliki/BlueGreenDeployment.html" target="_blank">Blue-Green deployment</a> while reading through
            some articles and this is a perfect <abbr title="Today I learnt">TIL</abbr>.
            In a nutshell, Blue-Green Deployment is a technique of running two identical production environments called Blue and Green.
            At any time, only one of the environments is live, with the live environment serving all production traffic. 
        </p>
        <p>
            For e.g - let say we have the Blue environment currently live. As we prepare a new version of software, the
            deployment and final stage of testing takes place in the environment that is not live: in this example, Green. 
            Once we have deployed and fully tested the software in Green, we switch the router so all incoming requests now go to Green instead of Blue. 
            Green is now live, and Blue is idle.
        </p>
        <p>
            This technique can eliminate downtime due to app deployment. 
            In addition, blue-green deployment reduces risk: if something unexpected happens with the new version on Green,
            we can immediately roll back to the last version by switching back to Blue.
           
        </p> 
           <div>
              <strong>References:</strong>
             <ul>
               <li>
                 <a href="https://martinfowler.com/bliki/BlueGreenDeployment.html" target="_blank">Martin Fowler article on Blue-Green deployment</a>
               </li>
               <li>
                 <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/blue-green.html" target="_blank">Cloud foundary guide on Blue-Green deployment</a>
               </li>
               <li>
                 <a href="https://opensource.com/article/17/5/colorful-deployments" target="_blank">Article on colorful deployments</a>
               </li>
               
             </ul>
          </div>
        </div>
    </li>
    
     <li  class="accordion" id="ac-8">  
      <h3>
        <button onclick=toggle('ac-8')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Use emojis in Windows (and as a result, in VSCode too 
          <span aria-hidden="true">üî•</span>)</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="09/22/2020">22 September 2020</time>       
          <p>
            I am crying with happiness as I found out today that we can use a shortcut to open emoji palatte anywhere in windows. Just press the keys `Windows` and `dot`
            together and you can witness a emoji palatte opening right up for you. Type name of any emoji to search for it and press enter to select it. 
            It's very convenient to navigate through keyboard (the right way to implement <span aria-hidden="true">üëç</span>).  
          </p>
          <p>
            This will come in handy for me as I am a very emoji extensive person <span aria-hidden="true">üíï</span>. Also, the ease of using it anywhere, especially in VSCode is so damn helpful.
            Till now, I used to search for emojies on internet and copy paste it into the code, if I ever needed to use it. Not to mention, when you have to use emojis
            in any conference chat window, and you cannot see any handy emoji option (as is available in applications like Microsoft Teams, skype, etc.)
          </p>
           <div>
              <strong>Credits:</strong> <a href="https://www.dotnetcatch.com/2019/06/04/visual-studio-quicktip-add-emoji-to-your-source-code/" target="_blank">
             dotnetcatch article on Visual Studio QuickTip: Add Emoji to your source code!</a>
          </div>
        </div>
    </li>
    
    <li  class="accordion" id="ac-7">  
      <h3>
        <button onclick=toggle('ac-7')><i class="fa fa-plus-square-o" aria-hidden="true"></i>
          Converting array to object in JavaScript
        </button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="09/18/2020">18 September 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <div>
             Today I came across a use-case where-in i needed to convert and Array into an Object for one of my tasks.
             I found many solutions for it on google, some of them are listed below for sample array of 
            <pre>
var arr = [ 
  { color: 'purple' }, 
  { color: 'green'}, 
  { color: 'yellow' } 
];
            </pre>
            
            <ul>
              <li>
                When we need index as the key for the resulting object, we can use any of following approach:
                <pre>
// ES6
var obj = { ...arr };

or

// ES5
var obj = Object.assign({}, arr);

or

var obj = {};
arr.reduce(function(obj, item, index, arr) {
  obj[index] = item;
  return obj;
}, {})

/** result -> 
{
  0: {color: "purple"}
  1: {color: "green"}
  2: {color: "yellow"}
}
*/
                </pre>
              </li>
               <li>
                  When we need any custom as the key for the resulting object, we can use any of following approach:
                 
                <pre>
var obj = Object.assign(
{},
...arr.map(val => ({ 
  [val.color]: val 
}))
);

or

var obj = {};
arr.reduce(function(obj, item, index, arr) {
obj[item.color] = item;
return obj;
}, {});

/** result -> 
{
  'purple': {color: "purple"}
  'green': {color: "green"}
  'yellow': {color: "yellow"}
}
*/
                </pre>
              </li>
            </ul>
          </div>
           <div>
              <strong>Reference:</strong>
              <a href="https://stackoverflow.com/questions/4215737/convert-array-to-object" target="_blank">:Stackoverflow link</a>
          </div>
        </div>
    </li>
    
     <li  class="accordion" id="ac-6">  
      <h3>
        <button onclick=toggle('ac-6')><i class="fa fa-plus-square-o" aria-hidden="true"></i>
          Event listener breakpoints in devtools
        </button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="09/12/2020">12 September 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <div>
            Today I learnt about <a href="https://dzone.com/articles/debug-javascript-using-chrome-developer-tools" target="_blank">Event listener breakpoints in google chrome devtools</a>. 
            
            <p>
              This is really useful for scenarios where we would like to debug out code when any particular event gets fired. 
              The code execution is paused at that point and we can take a look at the variables values at that moment, and anything else that we would like to debug.
            </p>  
          </div>
           <div>
              <strong>Credit</strong>
              <a href="https://www.linkedin.com/posts/mgechev_dombreakpoints-activity-6706810400245207040-nPic" target="_blank">:Linkedin post</a> by 
             <a href="https://www.linkedin.com/in/mgechev/" target="_blank">Minko Gechev</a>
          </div>
        </div>
    </li>
    
    
    <li  class="accordion" id="ac-5">  
      <h3>
        <button onclick=toggle('ac-5')><i class="fa fa-plus-square-o" aria-hidden="true"></i>
          vscode-jest-snippets
        </button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="09/08/2020">8 September 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <div>
            Today I discovered <a href="https://facebook.github.io/jest" target="_blank">Jest</a> snippet extension for Visual Studio Code. 
            
            <p>
              As I am an advocate of writing unit test cases, I find myself writing unit tests pretty frequently. 
              Currently I am working in a project which uses React for development and Jest for unit testing the code. 
              When writing test cases, we add each test case under <code>it</code>. But when typing <strong>it</strong>
              VS Code always autocompletes to <strong>instanceof</strong> and I had to rename it. 
              So I googled on how to fix that and hit the stackoverflow link with exact issue solved with help of the extension 
              <a href="https://marketplace.visualstudio.com/items?itemName=andys8.jest-snippets">vscode-jest-snippets</a>.
              
            </p>
            
          </div>
           <div>
              <strong>Reference:</strong>
              <a href="https://stackoverflow.com/questions/63696524/how-to-get-vscode-to-autocomplete-it-instead-of-instanceof-for-jest-for-reac/63791628#63791628" target="_blank">Stack overflow link</a>
          </div>
        </div>
    </li>
    
     <li  class="accordion" id="ac-4">  
      <h3>
        <button onclick=toggle('ac-4')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Transient props in Styled Components</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="08/26/2020">26 August 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <div>
            Today I learnt about <code>transient props</code> in <a href="https://styled-components.com/" target="_blank">Styled Components</a>. 
            
            <p>
             <strong>Issue:</strong> When creating a styled component with a prop which is similar to an existing HTML attribute, that prop gets passed through 
              to the underlying DOM element as a corresponding attribute. We could handle it by renaming that prop to not match any existing HTML attribute. 
              This new props now enables us to pass the same props with <code>$</code> prefixed to them, and styled components will know not to pass these to the rendered DOM element nor pass it further down the component hierarchy. 
            </p>
            
          </div>
           <div>
              <strong>Reference:</strong>
             <ul>
               <li>
                 <a href="https://github.com/styled-components/styled-components/issues/3220" target="_blank">Styled component github issues</a>
               </li>
               <li>
                 <a href="https://medium.com/@probablyup/introducing-transient-props-f35fd5203e0c" target="_blank">Read the detailed proposal on Medium</a>
               </li>
             </ul>  
          </div>
        </div>
    </li>
    
    <li  class="accordion" id="ac-3">  
      <h3>
        <button onclick=toggle('ac-3')><i class="fa fa-plus-square-o" aria-hidden="true"></i>HTML &lt;abbr&gt; tag</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="08/17/2020">17 August 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <div>
            Today I learnt that we have a HTML tag for abbreviations. As per MDN,
            <quote>
              The HTML Abbreviation element (&lt;abbr&gt;) represents an abbreviation or acronym; the optional title attribute can provide an expansion or description for the abbreviation. If present, title must contain this full description and nothing else.
            </quote>
            <p>
              By default, the text under this element has a style set to <code>text-decoration: underline dotted;</code>
              <br />
              We can have custom styles on it and can set the text-decoration to <code>none</code> to remove that dotted underline on it.
              I created a simple <a href="https://codepen.io/anuradha15/pen/zYqBBYv" source="_blank">codepen example</a> to see how this element works.
            </p>
            
          </div>
           <div>
              <strong>Read more:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr" target="_blank">MDN documentation on abbr tag</a>
          </div>
        </div>
    </li>
    
    <li  class="accordion" id="ac-2">  
      <h3>
        <button onclick=toggle('ac-2')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Activate same-width numbers for a font</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="08/14/2020">14 August 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <div>
            Today I learnt that we have css properties - <code>font-variant-numeric</code> and <code>font-feature-setting</code> which allow us 
            to enable same width on the numbers for a font.
            <p>
                <strong>Source:</strong> <a href="https://twitter.com/sulco/status/1293862293139337217" target="_blank">Twitter post on it</a>
            </p>
            
          </div>
           <div>
          There are some cool things we can achieve using these. </p>
          <strong>Read more</strong> on <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings">font-feature-settings</a> and 
          <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric">font-variant-numeric</a>
          </div>
        </div>
    </li>
    
    <li  class="accordion" id="ac-1">  
      <h3>
        <button onclick=toggle('ac-1')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Add resolutions to package.json</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="08/12/2020">11 August 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <strong>What was the issue?</strong> <br />
          <p>
          One of the sub-dependencies of my project got updated unintentionally to incorrect version (after running yarn upgrade on a dependency).
          To fix this, we had to add a resolution for the sub-dependecy to prevent it from causing any issues the release.
          </p>
          <p>
          Now, I heard this term <i>add resolution</i> for the first time, and had no idea what to do. So I followed the (dev) religious practice and googled about it. 
          Thankfully, I got the helpful link in the first attempt itself (what a relief!)
          </p>
      </div>
        <div>
          <strong>The solution I found:</strong>
          <br />          
          In a nutshell, I followed below steps: 
          <ol>
            <li> Deleted the package lock file created</li>
            <li> 
              Added a resolutions entry in the package.json for the sub-dependency
              <pre>
  {
    "dependencies": {
      "package-1": "2.3.1",
      "package-2": "3.1.7",
    }
    "resolutions": {
      /** because I upgraded package-1 and it had package-2 as dependency 
        * which got upgraded to a higher version which we did not want */
      "package-2": "3.1.7"  
     }
  }
              </pre>
            </li>
            <li>Re-run yarn upgrade command for package-1, and this time it does not increment the sub-dependency version. Problem solved!</li>
          </ol>
          
          <div>
          <br />
          Reference link: <a href="https://classic.yarnpkg.com/en/docs/selective-version-resolutions/" target="_blank">Read about selective dependency resolutions here</a>
          </div>
        </div>
      </div>
    </li>   
    
  </ul>
  
  <script>
    function toggle(id){
      var parentElement=document.getElementById(id);
      var icon = parentElement.querySelector('button .fa');
      var collapsibleDiv = parentElement.querySelector('.collapsible-ele');
      var isHidden = collapsibleDiv.getAttribute('aria-hidden');

      if(isHidden == 'true') {
        collapsibleDiv.setAttribute('class', 'collapsible-ele show');
        collapsibleDiv.setAttribute('aria-hidden', false);
        icon.setAttribute('class', 'fa fa-minus-square-o');
      } else {
        collapsibleDiv.setAttribute('class', 'collapsible-ele hide');
        collapsibleDiv.setAttribute('aria-hidden', true);
        icon.setAttribute('class', 'fa fa-plus-square-o');
      }
    }
  </script>
</section>
