---
layout: default
title: Anuradha Kumari
pageTitle: Quick tips and tricks
permalink: /quicktips/
is_home_btn_reqd: "True"
is_project_btn_reqd: "False"
---
<style>
  .figure-ex {
  font-family: system-ui;
  padding: 10px;
    border: 2px solid blue;
}

.figure-ex div, 
  .figure-ex figure {
  margin: 1em;
}

.figure-ex div p,
.figure-ex figcaption {
    max-width: 60ch;
    color: #561271;
}
.custom-caret {
    caret-color: #3ed372;
    border: 1px solid #111010;
    padding: 10px;
    background-color: #373535;
    color: white;
}
</style>
<section class="til">
  <h2>Sharing my everyday learnings</h2>

<p>This page will contain all the learnings and related resources which might be helpful for me in future as a quick reference. 
  Sharing in public, in case anyone else finds it useful.</p>
  <ul class="til-list">
    
<!--     <li  class="accordion" id="til-3">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-3')><i class="fa fa-plus-square-o" aria-hidden="true"></i>HTML &lt;abbr&gt; tag</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="08/17/2020">17 August 2020</time>       
          <p>
            
          </p>
           <div>
              <strong>References:</strong> 
			  <ul>
				  <li>
					<a href="https://support.google.com/webmasters/answer/156184?hl=en&ref_topic=4581190&visit_id=637381324315463178-3459005549&rd=1" target="_blank">MDN documentation on abbr tag</a>
				  </li>
			  </ul>
			  
          </div>
        </div>
    </li> -->
	  <li  class="accordion" id="til-25">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-25')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Hide sourcemap for apps deployed on netlify</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="07/04/2021">4 July 2021</time>       
          <p>
		 By default, when we deploy our websites to netlify or similar platforms, the source code can be seen in the <em>sources</em> tab of devtools.
		  <br />
		  If you want to hide it from the users, you can do that by adding a flag to <code>.env</code> file in the project root:
		  <code>GENERATE_SOURCEMAP=false</code>
		  
		</p>

        </div>
    </li>
	  <li  class="accordion" id="til-25">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-25')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Add RSS feed to slack</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="06/15/2021">15 June 2021</time>       
          <p>
		  Today I learned that we can subscribe to RSS feeds in slack itself and we can create good channels with quality content right there. 
		  <br/><br/>
		  Below are the steps on how we can work with RSS feeds in slack:
		<h4> To add a feed:</h4>
		<code>/feed <url of feed></code>
			<br/><br/>
			For example: <code>/feed https://www.a11yproject.com/feed/feed.xml</code>
			<h4>To check which feeds are added currently:</h4>
			<code>/feed list</code><br/>
			<br/> It lists all feeds along with their IDs - this ID is very useful if we want to remove any particular feed
			<br/>
			<h4>To remove any feed:</h4>
			<code>/feed remove <ID of that feed which we can get from list above></code>
		  	<br/>
		</p>
		<p>
			Learned from: <a href="https://www.howtogeek.com/709819/how-to-send-rss-feeds-to-a-slack-channel/">How to geek blog</a>
		</p>

        </div>
    </li>
	  <li  class="accordion" id="til-24">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-24')><i class="fa fa-plus-square-o" aria-hidden="true"></i>yarn upgrade-interactive</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="05/30/2021">30 May 2021</time>       
          <p>
		  We can bulk choose which packages to upgrade to latest version while using yarn:
		  <br />
		  <code>yarn upgrade-interactive --latest</code>
		  
		</p>
		<p>
			Learned from: <a href="https://twitter.com/debs_obrien/status/1399256756216381441">debs_obrien's tweet</a>
		</p>

        </div>
    </li>
	  <li  class="accordion" id="til-23">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-23')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Git empty commit</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="05/30/2021">30 May 2021</time>       
          <p>
		  We can do <em>git commit --allow-empty</em> to make a new commit with no actual changes to any files. So we do not need any random whitespace changes to trigger new builds.
		</p>
		<p>
			Learned from: <a href="https://twitter.com/meganesulli/status/1366466258393161729">Megan Sullivan's tweet</a>
		</p>

        </div>
    </li>
	  <li  class="accordion" id="til-22">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-22')><i class="fa fa-plus-square-o" aria-hidden="true"></i>yarn link/unlink</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="05/30/2021">30 May 2021</time>       
          <p>
		  Run command <em>yarn link</em> in the repositories which we want to link, let say repo1.
		  <br />
		  Run command <em> yarn link repo1</em> in the repository where we want to link <i>repo1</i>.
		  <br />
		  Run command <em>yarn unlink repo1</em> if we want to unlink the repository. Also need to run yarn install after unlinking any repostory so that it can fetch it from the packages now.
		</p>

        </div>
    </li>
	  <li  class="accordion" id="til-21">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-21')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Git shallow clone</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="05/30/2021">30 May 2021</time>       
          <p>
		  git clone <<repo clone link>> --branch master --depth 1
		</p>

        </div>
    </li>
	  <li  class="accordion" id="til-20">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-20')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Restart VPN system when it stops working</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="05/29/2021">29 May 2021</time>       
          <p>
		 <ol>
			 <li>Open task manager and end the VPN session.</li>
			 <li>Go to command prompt (cmd) and follow the next commands</li>
			 <li>ipconfig /flushdns ( It will flush your DNS entry )</li>
			 <li>ipconfig /release ( Your internet will disconnect )</li>
			 <li>ipconfig /renew ( internet will connect again)</li>
			 <li>Open RUN window ( Windows button + R ).</li>
			 <li>type services.msc</li>
			 <li>Services window will open > find the vpn service. > restart that service.</li>
			 <li>Connect VPN now. It should connect successfully after entering proper id and password.</li>
		</ol>
	  </p>

        </div>
    </li>
	  
	  <li  class="accordion" id="til-19">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-19')><i class="fa fa-plus-square-o" aria-hidden="true"></i>VS Code tip</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="05/29/2021">29 May 2021</time>       
          <p>
		  When we are using VS Code, we can press <kbd>CTRL</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>. This will highlight the text as well as find every copy of it
		  in that file. This enables us to edit multiple lines at same time.
		</p>

        </div>
    </li>
	  
	  <li  class="accordion" id="til-18">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-18')><i class="fa fa-plus-square-o" aria-hidden="true"></i>github1s trick</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="01/15/2021">11 February 2021</time>       
          <p>
		  Today I came across a neat trick on how to read the github public repository using an <em>1s</em> in the github url.
		</p>
		  <p>
		  For example - Let say  I want to read the code for my repo at <a href="https://github.com/anuk79/UnitTestingReactUsingJestAndEnzyme" target="_blank">
		  	UnitTestingReactUsingJestAndEnzyme
		  </a>
		  </p>
		  <p>
		  But I will have to open files one by one, and then go back to root level to access any other file. But today I learned that by altering the URL slightly, 
		  we can get experience of an online VSCode editor. The code is readonly, but it is very helpful as it helps us navigate through 
		  code and folder structure the way we actually use while coding on any IDE.
		  </p>
		  <p>
		  Check the new URL below: <br />
		  <code>
			  http://github1s.com/anuk79/UnitTestingReactUsingJestAndEnzyme
		  </code>
		  </p>
		  Notice the extra <em>1s</em> after github in the URL. That, dear friends, is the trick. So neat, and super helpful, right?
		<p>
			<b>Reference:</b> <a href="https://twitter.com/DThompsonDev/status/1359710743239745541" target="_blank">
		  Danny Thompson tweet showing the trick</a>	
		  </p>
        </div>
    </li>
	  
	  <li  class="accordion" id="til-17">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-17')><i class="fa fa-plus-square-o" aria-hidden="true"></i>dot's meaning in git checkout . command</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="01/15/2021">15 January 2021</time>       
          <p>
		Today I came across a git command named `git checkout .` and since I had never used or saw it before, I googled to understand the usage for it.
		</p>
		<p>
			<strong>Resource:</strong> The <a href="https://stackoverflow.com/questions/14460595/git-checkout-with-dot" target="_blank">
		  stackoverflow answer</a> has a very good explanation.		
		  </p>

        </div>
    </li>
	  
	   <li  class="accordion" id="til-16">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-16')><i class="fa fa-plus-square-o" aria-hidden="true"></i>caret-color CSS property for editable HTML elements</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="11/24/2020">24 November 2020</time>       
          <p>
		  Today I came across a css property called <a href="">caret-color</a>. It is such a cool little feature, and it is
		  <a href="https://caniuse.com/?search=caret-color" target="_blank">supported by all major browsers</a>.
          </p>
		<p>
			This caret-color CSS property changes the color of the cursor (or caret) in any editable element, like inputs, texareas, or 
			a contenteditable div.
			For example, PFB the div which is content editable and I have changed it's caret-color to be hexcode - #3ed372. 
			
		</p>
		<p>
			Try editing it and see the magic.
			<span aria-hidden=-"true">✨</span>
		</p>
		<div tab-index="0" class="custom-caret" contenteditable>Hello there, I am an editable div. Look at my caret-color. Isn't it pretty?</div>
		<div>
			<strong>References:</strong>
			<ul>
				<li>
					<a href="https://twitter.com/IMAC2/status/1331222842864766980?s=19" target="_blank">tweet of Álvaro Trigo mentioning this property</a>
				</li>
				<li>
					<a href="https://css-tricks.com/almanac/properties/c/caret-color/9" target="_blank">css tricks article on caret color</a>
				</li>
			</ul>
		</div>
        </div>
    </li>
	  
	  <li  class="accordion" id="til-15">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-15')><i class="fa fa-plus-square-o" aria-hidden="true"></i>prettier and eslint plugins configuration for React</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="11/14/2020">14 November 2020</time>       
          <p>
		Today I Practised how to configure the prettier and eslint plugins for a React project from scratch.
		  I have documented the step-by-step process at <a href="https://prettier-eslint-configuration-for-react.netlify.app/" target="_blank">
		  prettier-eslint-configuration-for-react website</a>.		
          </p>
        </div>
    </li>
	  
	  <li  class="accordion" id="til-14">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-14')><i class="fa fa-plus-square-o" aria-hidden="true"></i>ES8 or ES2017 features</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="11/04/2020">4 November 2020</time>       
          <p>
		Continuing my concepts refresher journey, I went through all the features added in ES8. The link with details is listed in the references section.
		
          </p>
           <div>
              <strong>References:</strong> 
			  <ul>
				  <li>
					<a href="https://flaviocopes.com/es2017/" target="_blank">The ES2017 Guide</a>
				  </li>
			  </ul>
			  
          </div>
        </div>
    </li>
	
	<li  class="accordion" id="til-13">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-13')><i class="fa fa-plus-square-o" aria-hidden="true"></i>ES6 Template literals/strings</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="11/03/2020">3 November 2020</time>       
          <p>
            Every year, as the year end approaches, I try to refresh my knowledge of technical topics I am working on, and the ones I love.
			This year too, as November began, so did my refresher journey. I started by going through the JavaScript concepts.
		</p>
		<p>
			I came across <code>template literals</code> concept. As a React developer, I have been using this feature
			extensively and this is certainly one of the most useful features to come in ES6. It is used for string substitution and for creating multiline strings.
		</p>
		<p>
			On further read, I found something called as <code>tagged templates</code>.
			As I never read it before, this intrigued me and I dig deeper to understand its syntax and usage.
		</p>
		<p>
			Tagged templates are basically a special type of function call where function name is placed before 
			the template string. PFB code sample:
			<textarea  readonly rows="31" class="code-sample">
function showOrderDetails(stringVals, ...values) {
  /**
  * stringVals contains all the strings in array form,
  * the second onwards parameters of this function contain
  * all the individual string interpolated values
  * and we are gathering them in 'values' using rest operator.
  */
  let resultStr = '';
  for (let i = 0; i < stringVals.length; i++) {
    if (i > 0) {
      if (typeof values[i - 1] === "number") {
        resultStr += `$${values[i-1].toFixed(2)}`;
      } else {
        resultStr += values[i-1]
      }
    }
    resultStr += stringVals[i]
  }
  return resultStr;
}

let name = "Anu";
let price = 2500;

showOrderDetails`Congratulations ${name}! Your order for ${price} has been successfully placed`

/** output ->
Congratulations Anu! Your order for $2500.00 has been successfully placed
*/
			</textarea>
			
          </p>
		  <p>
		    This is such a powerful tool, and can be used for a wide range of scenarios, like formatting, localization,
			automatic escaping of any interpolated variables, etc.. You can go through links in references section to read
			details about template literals and tagged templates.
		  </p>
           <div>
              <strong>References:</strong> 
			  <ul>
				  <li>
					<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" target="_blank">MDN documentation on Template literals</a>
				  </li>
				  <li>
					<a href="https://developers.google.com/web/updates/2015/01/ES6-Template-Strings" target="_blank">MDN documentation on Template literals</a>
				  </li>
				  <li>
					<a href="https://wesbos.com/tagged-template-literals" target="_blank">Tagged Template Literals by Wes bos</a>
				  </li>
			  </ul>
			  
          </div>
        </div>
    </li>
    
    <li  class="accordion" id="til-12">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-12')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Figure tags in HTML5</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="11/02/2020">2 November 2020</time>       
          <p>
            Today I stumbled across <code>figure</code> tag which is one of the lesser known semantic tags which got introduced in HTML5.
            It tells the browser that <code>figure</code> is a container that holds elements that have a relation to each other. 
            While most common examples use an image to explain this tag, it's worth noting that it does not need to contain only image. 
            It can also contain tables, audio, video, etc.
            To explain this, I am also going to use an image element with some related text content.
          </p>
           <p>
           Let's say we have an image and some text content that associates with it (some kind of caption). One way of creating it could be using image and paragraph elements wrapped within a div container.
          <div><b>HTML Code:</b></div>
             <textarea readonly rows="12" class="code-sample">
  <div>
    <img src="https://c4.wallpaperflare.com/wallpaper/392/664/919/toothless-night-fury-how-to-train-your-dragon-how-to-train-your-dragon-2-wallpaper-preview.jpg" alt="Night fury dragon" width="300" height="200" />
    <p> 
      How to train your dragon is one of my favorite movies and Night fury is the most adorable 
      and amazing dragon I have ever met (through the movie, of course)
    </p>
</div>
</textarea>
          <div>And the result is as shown below:</div>
             <div class="figure-ex">
             <div>
                <img src="https://c4.wallpaperflare.com/wallpaper/392/664/919/toothless-night-fury-how-to-train-your-dragon-how-to-train-your-dragon-2-wallpaper-preview.jpg" alt="Night fury dragon" width="300" height="200" />
                <p> 
                  How to train your dragon is one of my favorite movies and Night fury is the most adorable and amazing dragon I have ever met (through the movie, of course)
                </p>
              </div>
               </div>
          </p>
        <p>
          Now let's use figure element and see how we can get the same results.
        <div><b>HTML5 Code:</b></html>
        <textarea readonly rows="12" class="code-sample">
  <figure>
    <img src="https://c4.wallpaperflare.com/wallpaper/392/664/919/toothless-night-fury-how-to-train-your-dragon-how-to-train-your-dragon-2-wallpaper-preview.jpg" alt="Night fury dragon" width="300" height="200" />
    <figcaption> 
      How to train your dragon is one of my favorite movies and Night fury is the most adorable and amazing dragon I have ever met (through the movie, of course)
    </figcaption>
</figure>
</textarea>
        <div style="margin-top:10px"> And, the result is as shown below: </div>
        <div class="figure-ex">
          <figure>
    <img src="https://c4.wallpaperflare.com/wallpaper/392/664/919/toothless-night-fury-how-to-train-your-dragon-how-to-train-your-dragon-2-wallpaper-preview.jpg" alt="Night fury dragon" width="300" height="200" />
    <figcaption> 
      How to train your dragon is one of my favorite movies and Night fury is the most adorable and amazing dragon I have ever met (through the movie, of course)
    </figcaption>
</figure>
        </div>
        </p>
      <p>
        Now, if we compare results, we see same visual result, but using a figure tag adds the semantic to our elements and hence helps with accessibility and SEO.
      </p>
      <p>
        You can also check <a href="https://codepen.io/anuradha15/full/PozeBNQ" target="_blank">Codepen for above example</a>.
      </p>
           <div>
              <strong>References:</strong> 
             <ul>
               <li>
                 <a href="https://forum.freecodecamp.org/t/why-use-the-figure-element/315116/3" target="_blank">Why use the figure element?</a>
               </li>
             </ul>
          </div>
        </div>
    </li>
    
        <li  class="accordion" id="til-11">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-11')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Sitemaps</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="10/12/2020">12 October 2020</time>       
          <p>
            Today I did some research on sitemaps. I had a vague idea about them - that they contain the information of all the pages on our website and how to reach those links.
            But, i had never created any sitemap before. I read most of the content on google search console help and created one basic sitemap for my existing website - 
            <a href="http://explore-a11y.netlify.app/" aria-label="Explore accessibility - opens in new tab" target=""_blank>Explore accessibility</a>.
          </p>
           <div>
              <strong>Read more:</strong> <a href="https://support.google.com/webmasters/answer/156184?hl=en&ref_topic=4581190&visit_id=637381324315463178-3459005549&rd=1" target="_blank">Learn about sitemaps</a>
          </div>
        </div>
    </li>
    
        <li  class="accordion" id="til-10">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-10')><i class="fa fa-plus-square-o" aria-hidden="true"></i>HTML &lt;details&gt; tag</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="10/08/2020">8 October 2020</time>       
          <p>
            Today I learnt about the details tag in HTML which can be used for creating a coolapsible widget with a label and information. 
            Pretty similar to the widget which I created for this current view using JavaScript. I would have used it if I knew about it earlier. 
            It has a good browser support with only exceptions of Internet Explorer and Edge versions before 79.
          </p>
          <p><a href="https://codepen.io/anuradha15/pen/GRqRzLM" target="_blank">Codepen link for a demo on details tag with some custom styling</a></p>
           <div>
              <strong>Read more:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details" target="_blank">MDN documentation on the <em>Details</em> disclosure element</a>
          </div>
        </div>
    </li>
    
      
    <li  class="accordion" id="til-9">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-9')><i class="fa fa-plus-square-o" aria-hidden="true"></i>
          Blue-Green deployment
        </button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="09/23/2020">23 September 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
            <p>
            Today I came across term <a href="https://martinfowler.com/bliki/BlueGreenDeployment.html" target="_blank">Blue-Green deployment</a> while reading through
            some articles and this is a perfect <abbr title="Today I learnt">TIL</abbr>.
            In a nutshell, Blue-Green Deployment is a technique of running two identical production environments called Blue and Green.
            At any time, only one of the environments is live, with the live environment serving all production traffic. 
        </p>
        <p>
            For e.g - let say we have the Blue environment currently live. As we prepare a new version of software, the
            deployment and final stage of testing takes place in the environment that is not live: in this example, Green. 
            Once we have deployed and fully tested the software in Green, we switch the router so all incoming requests now go to Green instead of Blue. 
            Green is now live, and Blue is idle.
        </p>
        <p>
            This technique can eliminate downtime due to app deployment. 
            In addition, blue-green deployment reduces risk: if something unexpected happens with the new version on Green,
            we can immediately roll back to the last version by switching back to Blue.
           
        </p> 
           <div>
              <strong>References:</strong>
             <ul>
               <li>
                 <a href="https://martinfowler.com/bliki/BlueGreenDeployment.html" target="_blank">Martin Fowler article on Blue-Green deployment</a>
               </li>
               <li>
                 <a href="https://docs.cloudfoundry.org/devguide/deploy-apps/blue-green.html" target="_blank">Cloud foundary guide on Blue-Green deployment</a>
               </li>
               <li>
                 <a href="https://opensource.com/article/17/5/colorful-deployments" target="_blank">Article on colorful deployments</a>
               </li>
               
             </ul>
          </div>
        </div>
    </li>
    
     <li  class="accordion" id="til-8">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-8')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Use emojis in Windows (and as a result, in VSCode too 
          <span aria-hidden="true">🔥</span>)</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="09/22/2020">22 September 2020</time>       
          <p>
            I am crying with happiness as I found out today that we can use a shortcut to open emoji palatte anywhere in windows. Just press the keys <em>Windows</em>
            and <em>dot</em>
            together and you can witness a emoji palatte opening right up for you. Type name of any emoji to search for it and press enter to select it. 
            It's very convenient to navigate through keyboard (the right way to implement <span aria-hidden="true">👍</span>).  
          </p>
          <p>
            This will come in handy for me as I am a very emoji extensive person <span aria-hidden="true">💕</span>. Also, the ease of using it anywhere, especially in VSCode is so damn helpful.
            Till now, I used to search for emojies on internet and copy paste it into the code, if I ever needed to use it. Not to mention, when you have to use emojis
            in any conference chat window, and you cannot see any handy emoji option (as is available in applications like Microsoft Teams, skype, etc.)
          </p>
           <div>
              <strong>Credits:</strong> <a href="https://www.dotnetcatch.com/2019/06/04/visual-studio-quicktip-add-emoji-to-your-source-code/" target="_blank">
             dotnetcatch article on Visual Studio QuickTip: Add Emoji to your source code!</a>
          </div>
        </div>
    </li>
    
    <li  class="accordion" id="til-7">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-7')><i class="fa fa-plus-square-o" aria-hidden="true"></i>
          Converting array to object in JavaScript
        </button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="09/18/2020">18 September 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <div>
             Today I came across a use-case where-in i needed to convert and Array into an Object for one of my tasks.
             I found many solutions for it on google, some of them are listed below for sample array of 
		  
		  <textarea readonly rows="6" class="code-sample">  
var arr = [ 
  { color: 'purple' }, 
  { color: 'green'}, 
  { color: 'yellow' } 
];   </textarea>
            
            <ul>
              <li>
                When we need index as the key for the resulting object, we can use any of following approach:
		      
		      <textarea readonly rows="22" class="code-sample">
			      // ES6
var obj = { ...arr };

or

// ES5
var obj = Object.assign({}, arr);

or

var obj = {};
arr.reduce(function(obj, item, index, arr) {
  obj[index] = item;
  return obj;
}, {})

/** result -> 
{
  0: {color: "purple"}
  1: {color: "green"}
  2: {color: "yellow"}
}
*/      </textarea>
              </li>
               <li>
                  When we need any custom as the key for the resulting object, we can use any of following approach:
		       
                 <textarea readonly rows="22" class="code-sample"> 
var obj = Object.assign(
{},
...arr.map(val => ({ 
  [val.color]: val 
}))
);

or

var obj = {};
arr.reduce(function(obj, item, index, arr) {
obj[item.color] = item;
return obj;
}, {});

/** result -> 
{
  'purple': {color: "purple"}
  'green': {color: "green"}
  'yellow': {color: "yellow"}
}
*/ </textarea>
              </li>
            </ul>
          </div>
           <div>
              <strong>Reference:</strong>
              <a href="https://stackoverflow.com/questions/4215737/convert-array-to-object" target="_blank">:Stackoverflow link</a>
          </div>
        </div>
    </li>
    
     <li  class="accordion" id="til-6">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-6')><i class="fa fa-plus-square-o" aria-hidden="true"></i>
          Event listener breakpoints in devtools
        </button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="09/12/2020">12 September 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <div>
            Today I learnt about <a href="https://dzone.com/articles/debug-javascript-using-chrome-developer-tools" target="_blank">Event listener breakpoints in google chrome devtools</a>. 
            
            <p>
              This is really useful for scenarios where we would like to debug out code when any particular event gets fired. 
              The code execution is paused at that point and we can take a look at the variables values at that moment, and anything else that we would like to debug.
            </p>  
          </div>
           <div>
              <strong>Credit</strong>
              <a href="https://www.linkedin.com/posts/mgechev_dombreakpoints-activity-6706810400245207040-nPic" target="_blank">:Linkedin post</a> by 
             <a href="https://www.linkedin.com/in/mgechev/" target="_blank">Minko Gechev</a>
          </div>
        </div>
    </li>
    
    
    <li  class="accordion" id="til-5">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-5')><i class="fa fa-plus-square-o" aria-hidden="true"></i>
          vscode-jest-snippets
        </button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="09/08/2020">8 September 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <div>
            Today I discovered <a href="https://facebook.github.io/jest" target="_blank">Jest</a> snippet extension for Visual Studio Code. 
            
            <p>
              As I am an advocate of writing unit test cases, I find myself writing unit tests pretty frequently. 
              Currently I am working in a project which uses React for development and Jest for unit testing the code. 
              When writing test cases, we add each test case under <code>it</code>. But when typing <strong>it</strong>
              VS Code always autocompletes to <strong>instanceof</strong> and I had to rename it. 
              So I googled on how to fix that and hit the stackoverflow link with exact issue solved with help of the extension 
              <a href="https://marketplace.visualstudio.com/items?itemName=andys8.jest-snippets">vscode-jest-snippets</a>.
              
            </p>
            
          </div>
           <div>
              <strong>Reference:</strong>
              <a href="https://stackoverflow.com/questions/63696524/how-to-get-vscode-to-autocomplete-it-instead-of-instanceof-for-jest-for-reac/63791628#63791628" target="_blank">Stack overflow link</a>
          </div>
        </div>
    </li>
    
     <li  class="accordion" id="til-4">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-4')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Transient props in Styled Components</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="08/26/2020">26 August 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <div>
            Today I learnt about <code>transient props</code> in <a href="https://styled-components.com/" target="_blank">Styled Components</a>. 
            
            <p>
             <strong>Issue:</strong> When creating a styled component with a prop which is similar to an existing HTML attribute, that prop gets passed through 
              to the underlying DOM element as a corresponding attribute. We could handle it by renaming that prop to not match any existing HTML attribute. 
              This new props now enables us to pass the same props with <code>$</code> prefixed to them, and styled components will know not to pass these to the rendered DOM element nor pass it further down the component hierarchy. 
            </p>
            
          </div>
           <div>
              <strong>Reference:</strong>
             <ul>
               <li>
                 <a href="https://github.com/styled-components/styled-components/issues/3220" target="_blank">Styled component github issues</a>
               </li>
               <li>
                 <a href="https://medium.com/@probablyup/introducing-transient-props-f35fd5203e0c" target="_blank">Read the detailed proposal on Medium</a>
               </li>
             </ul>  
          </div>
        </div>
    </li>
    
    <li  class="accordion" id="til-3">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-3')><i class="fa fa-plus-square-o" aria-hidden="true"></i>HTML &lt;abbr&gt; tag</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="08/17/2020">17 August 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <div>
            Today I learnt that we have a HTML tag for abbreviations. As per MDN,
            <quote>
              The HTML Abbreviation element (&lt;abbr&gt;) represents an abbreviation or acronym; the optional title attribute can provide an expansion or description for the abbreviation. If present, title must contain this full description and nothing else.
            </quote>
            <p>
              By default, the text under this element has a style set to <code>text-decoration: underline dotted;</code>
              <br />
              We can have custom styles on it and can set the text-decoration to <code>none</code> to remove that dotted underline on it.
              I created a simple <a href="https://codepen.io/anuradha15/pen/zYqBBYv" source="_blank">codepen example</a> to see how this element works.
            </p>
            
          </div>
           <div>
              <strong>Read more:</strong> <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr" target="_blank">MDN documentation on abbr tag</a>
          </div>
        </div>
    </li>
    
    <li  class="accordion" id="til-2">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-2')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Activate same-width numbers for a font</button>
      </h3>
      <div  aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="08/14/2020">14 August 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <div>
            Today I learnt that we have css properties - <code>font-variant-numeric</code> and <code>font-feature-setting</code> which allow us 
            to enable same width on the numbers for a font.
            <p>
                <strong>Source:</strong> <a href="https://twitter.com/sulco/status/1293862293139337217" target="_blank">Twitter post on it</a>
            </p>
            
          </div>
           <div>
          There are some cool things we can achieve using these. </p>
          <strong>Read more</strong> on <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings">font-feature-settings</a> and 
          <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-variant-numeric">font-variant-numeric</a>
          </div>
        </div>
    </li>
    
    <li  class="accordion" id="til-1">  
      <h3>
        <button aria-expanded="false" onclick=toggle('til-1')><i class="fa fa-plus-square-o" aria-hidden="true"></i>Add resolutions to package.json</button>
      </h3>
      <div aria-hidden="true" class="collapsible-ele hide">
        <div class="blog-date">
          <i class="fa fa-calendar" aria-label="Published on" title="Published on"></i>
          <time datetime="08/12/2020">11 August 2020</time>
        </div>
<!--         <div class="blog-tags"><i class="fa fa-tags" aria-label="Tags" title="Tags"></i>yarn, resolution, packagejson </div> -->
        <div>
          <strong>What was the issue?</strong> <br />
          <p>
          One of the sub-dependencies of my project got updated unintentionally to incorrect version (after running yarn upgrade on a dependency).
          To fix this, we had to add a resolution for the sub-dependecy to prevent it from causing any issues the release.
          </p>
          <p>
          Now, I heard this term <i>add resolution</i> for the first time, and had no idea what to do. So I followed the (dev) religious practice and googled about it. 
          Thankfully, I got the helpful link in the first attempt itself (what a relief!)
          </p>
      </div>
        <div>
          <strong>The solution I found:</strong>
          <br />          
          In a nutshell, I followed below steps: 
          <ol>
            <li> Deleted the package lock file created</li>
            <li> 
              Added a resolutions entry in the package.json for the sub-dependency
		    <textarea readonly rows="15" class="code-sample">    
  {
    "dependencies": {
      "package-1": "2.3.1",
      "package-2": "3.1.7",
    }
    "resolutions": {
      /** because I upgraded package-1 and it had package-2 as dependency 
        * which got upgraded to a higher version which we did not want */
      "package-2": "3.1.7"  
     }
  } </textarea>
            </li>
            <li>Re-run yarn upgrade command for package-1, and this time it does not increment the sub-dependency version. Problem solved!</li>
          </ol>
          
          <div>
          <br />
          Reference link: <a href="https://classic.yarnpkg.com/en/docs/selective-version-resolutions/" target="_blank">Read about selective dependency resolutions here</a>
          </div>
        </div>
      </div>
    </li>   
    
  </ul>
  
  <script>
    function toggle(id){
      var parentElement=document.getElementById(id);
      var icon = parentElement.querySelector('button .fa');
      var button = parentElement.querySelector('button');
      var collapsibleDiv = parentElement.querySelector('.collapsible-ele');
      var isHidden = collapsibleDiv.getAttribute('aria-hidden');

      if(isHidden == 'true') {
        collapsibleDiv.setAttribute('class', 'collapsible-ele show');
        collapsibleDiv.setAttribute('aria-hidden', false);
        button.setAttribute('aria-expanded', true);
        icon.setAttribute('class', 'fa fa-minus-square-o');
      } else {
        collapsibleDiv.setAttribute('class', 'collapsible-ele hide');
        collapsibleDiv.setAttribute('aria-hidden', true);
        button.setAttribute('aria-expanded', false);
        icon.setAttribute('class', 'fa fa-plus-square-o');
      }
    }
  </script>
</section>
